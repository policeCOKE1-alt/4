-- BallPredictor1.txt (modified to support stopping)
local predictor = {}
predictor.running = true   -- Controls the lifetime of all loops
predictor.enabled = true   -- Controls whether the predictor is active

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local gravity = workspace.Gravity * 0.60  -- typically 196.2 studs/sec^2

-- SETTINGS
local numTrajectoryPoints = 100         -- number of dots per trajectory line
local timeStep = 0.01                   -- simulation time step for prediction
local maxTrackingDistance = 150         -- max distance (studs) to track a ball

-- FOLDER FOR TRAJECTORY MARKERS
local trajectoryFolder = workspace:FindFirstChild("Trajectory")
if not trajectoryFolder then
    trajectoryFolder = Instance.new("Folder")
    trajectoryFolder.Name = "Trajectory"
    trajectoryFolder.Parent = workspace
end

-- TABLE TO TRACK BALLS
local trackedBalls = {}

-- FUNCTION: Create trajectory markers (dots) for a hit; auto-destroys them after 0.8 seconds
local function createTrajectoryMarkers()
    local markers = {}
    for i = 1, numTrajectoryPoints do
        local part = Instance.new("Part")
        part.Size = Vector3.new(0.3, 0.3, 0.3)
        part.Shape = Enum.PartType.Ball
        part.Material = Enum.Material.SmoothPlastic
        part.Color = Color3.new(1, 0, 0)  -- red markers
        part.Transparency = 0.8
        part.Anchored = true
        part.CanCollide = false
        part.CanTouch = false
        part.CanQuery = false
        part.Parent = trajectoryFolder
        table.insert(markers, part)
    end
    task.spawn(function()
        wait(0.8)
        for _, marker in ipairs(markers) do
            if marker then marker:Destroy() end
        end
    end)
    return markers
end

-- FUNCTION: Add a ball to tracking
local function addBall(ball)
    if trackedBalls[ball] then return end
    trackedBalls[ball] = {
        lastPos = ball.Position,
        lastVelocity = Vector3.new(0, 0, 0),
        hasHitOccurred = false,
        hitStartPos = nil,
        hitVelocity = nil,
        trajectoryMarkers = nil,
        lastHitter = nil
    }
end

-- FUNCTION: Remove a ball from tracking
local function removeBall(ball)
    trackedBalls[ball] = nil
end

-- FUNCTION: Determine if the ball hit an opponent (based on team)
local function isOpponentHit(ball)
    local hitter = ball:GetAttribute("LastHitter")
    if not hitter or not hitter:IsA("Player") then return true end
    return hitter.Team ~= player.Team
end

-- Start scanning for balls in a coroutine
predictor.scanBallsThread = coroutine.create(function()
    while predictor.running do
        if predictor.enabled then
            local foundBalls = {}
            for _, obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("BasePart") and string.find(string.lower(obj.Name), "ball") then
                    if (obj.Position - hrp.Position).Magnitude <= maxTrackingDistance then
                        foundBalls[obj] = true
                        if not trackedBalls[obj] then
                            addBall(obj)
                        end
                    end
                end
            end
            for ball, _ in pairs(trackedBalls) do
                if not ball or not ball.Parent or not foundBalls[ball] then
                    removeBall(ball)
                end
            end
        end
        wait(0.3)
    end
end)
coroutine.resume(predictor.scanBallsThread)

-- Main loop: update tracked balls each frame using RenderStepped
predictor.renderConnection = RunService.RenderStepped:Connect(function(deltaTime)
    if not predictor.enabled then return end

    for ball, state in pairs(trackedBalls) do
        local currentPos = ball.Position
        local currentVelocity = (currentPos - state.lastPos) / deltaTime

        local prevHoriz = Vector3.new(state.lastVelocity.X, 0, state.lastVelocity.Z)
        local currHoriz = Vector3.new(currentVelocity.X, 0, currentVelocity.Z)

        if not state.trajectoryMarkers or state.hasHitOccurred then
            if prevHoriz.Magnitude > 0 and currHoriz.Magnitude > 0 then
                local dotProduct = prevHoriz.Unit:Dot(currHoriz.Unit)
                if dotProduct < 0 then
                    if isOpponentHit(ball) then
                        state.hitVelocity = currentVelocity
                        state.hitStartPos = currentPos
                        state.hasHitOccurred = true
                        state.trajectoryMarkers = createTrajectoryMarkers()
                    end
                end
            end
        end

        if state.trajectoryMarkers then
            for i, marker in ipairs(state.trajectoryMarkers) do
                local t = i * timeStep
                local predictedPos = state.hitStartPos + state.hitVelocity * t + Vector3.new(0, -0.5 * gravity * t^2, 0)
                marker.Position = predictedPos
            end
        end

        state.lastVelocity = currentVelocity
        state.lastPos = currentPos
    end
end)

-- Define the stop method to cleanly terminate loops and disconnect connections
function predictor.stop()
    predictor.running = false
    predictor.enabled = false
    if predictor.renderConnection then
        predictor.renderConnection:Disconnect()
    end
end

return predictor
